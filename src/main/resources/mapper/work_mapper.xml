<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC	"-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="kr.co.cc.work.dao.WorkDAO">

	<select id="workHistoryList" resultType="kr.co.cc.work.dto.WorkDTO">
		SELECT * FROM working_hour WHERE member_id=#{id} ORDER BY date DESC
	</select>

	<select id="timeGoBefore" resultType="int">
		SELECT COUNT(member_id) FROM working_hour WHERE member_id=#{param1} AND date=#{param2}
	</select>
	
	<select id="findName" resultType="String">
		SELECT name FROM member WHERE id=#{param1}
	</select>
	
	<insert id="timeGo">
		insert into working_hour (member_id,name) values (#{param1},#{param2});
	</insert>
	
	<update id="timeEnd">
		UPDATE working_hour SET time_end=#{param3} WHERE member_id=#{param1} AND date=#{param2}
	</update>
	
	<insert id="WorkChangeRequest" parameterType="hashmap">
		insert into working_hour_update (id,member_id,name,date,update_time,type,reason) 
			values (#{id},#{member_id},#{name},#{date},#{update_time},#{type},#{reason});
	</insert>	
	
	<select id="WorkChangeRequestChk">
		SELECT count(id) FROM working_hour_update WHERE id=#{param1} AND type=#{param2}
	</select>	
	
	<select id="workHistoryReqListGo" resultType="kr.co.cc.work.dto.WorkDTO">
		SELECT * FROM working_hour_update WHERE member_id=#{id}  ORDER BY date DESC
	</select>	
	
	<select id="workHistoryList_Ad" resultType="kr.co.cc.work.dto.WorkDTO">
		SELECT w.id, w.member_id, w.name ,w.date ,w.update_time ,w.type ,w.reason ,w.approval ,m.dept_name 
		FROM working_hour_update w inner join member m 
		on w.member_id = m.id 
		ORDER BY date DESC
	</select>
	
	<update id="WorkChangeAdmin">	
		UPDATE working_hour_update set approval=#{param3} where id=#{param1} and type=#{param2}
	</update>
	
	<update id="workHistoryChange">	
		UPDATE working_hour set approval=#{param3} where id=#{param1} and type=#{param2}
	</update>
	
	<select id="WorkChangeAdminChk">
		SELECT count(id) FROM working_hour_update WHERE id=#{param1} AND type=#{param2} AND approval=0
	</select>
	
	
	<update id="workHistoryChange_go">
		UPDATE working_hour SET time_go=#{param2} WHERE id=#{param1}
	</update>
	
	<update id="workHistoryChange_end">
		UPDATE working_hour SET time_end=#{param2} WHERE id=#{param1}
	</update>
	
	
	<select id="workDailyList" resultType="kr.co.cc.work.dto.WorkDTO">
	SELECT m.dept_name ,m.name ,m.job_name, w.date ,w.time_go ,w.time_end, w.member_id
		FROM working_hour w inner join member m 
		on w.member_id = m.id
	where w.date = (select MAX(date) from working_hour)
	</select>	
	
	
	<select id="dailyListFind" resultType="kr.co.cc.work.dto.WorkDTO">
	SELECT m.dept_name ,m.name ,m.job_name, w.date ,w.time_go ,w.time_end ,w.member_id
		FROM working_hour w inner join member m 
		on w.member_id = m.id
	where w.date = (select max(date) from working_hour where date = #{param1})	
	</select>
	
	<select id="dayChk">
		SELECT DATE_FORMAT(#{param1}, '%W')
	</select>
	
	
	<select id="weekListFind" resultType="kr.co.cc.work.dto.WorkDTO">
	    SELECT
	        m.id as member_id,
	        m.dept_name,
	        m.name,
	        m.job_name,
	        IFNULL(SEC_TO_TIME(SUM(TIME_TO_SEC(wh.time_end) - TIME_TO_SEC(wh.time_go))), '00:00:00') AS total_time,
	        wl.worn
	    FROM member m
	    LEFT JOIN working_hour wh ON m.id = wh.member_id
	        AND wh.date BETWEEN #{param1} AND DATE_ADD(#{param1}, INTERVAL 4 DAY)
	    LEFT JOIN worn_list wl ON m.id = wl.member_id
	        AND wl.week = #{param1}
	    GROUP BY m.id
	    ORDER BY total_time asc, member_id
	</select>
	
	<select id="workWornChk">
		select count(id) from worn_list where member_id=#{param1} and week=#{param2}
	</select>

	
	<insert id="workWorn" parameterType="hashmap">
		INSERT INTO worn_list (member_id,dept_name,name,job_name,week,total_time) 
		VALUES (#{member_id},#{dept_name},#{name},#{job_name},#{week},#{total_time})
	</insert>
	
	<select id="workWornList" resultType="kr.co.cc.work.dto.WorkDTO">
		select * from worn_list 
	</select>
	
	<select id="wornAllList">
		SELECT member_id ,name ,dept_name ,week ,COUNT(worn) as total_worn from worn_list wl group by member_id order by count(worn) desc, member_id
	</select>
	
	 
	<select id="wornListFindName" resultType="kr.co.cc.work.dto.WorkDTO">
		SELECT * FROM worn_list WHERE name LIKE CONCAT('%', #{param2}, '%') order by worn desc, member_id
	</select>
	
	<select id="wornListFindId" resultType="kr.co.cc.work.dto.WorkDTO">
		SELECT * FROM worn_list WHERE member_id LIKE CONCAT('%', #{param2}, '%') order by worn desc, member_id
	</select>
	
	<delete id="wornDel">
		delete from worn_list where member_id=#{param1} and week=#{param2}
	</delete>
		
	<select id="annual_leave" resultType="kr.co.cc.work.dto.WorkDTO">
		select * from annual_leave where member_id = #{param1}
	</select>
	 
	<select id="leave_recode_List" resultType="kr.co.cc.work.dto.WorkDTO">
		select * from leave_recode where regist_id = #{param1}
	</select>
	
	<insert id="annualRegistration">
		INSERT INTO leave_recode (regist_id,approval_id,start_date,end_date,use_cnt,reason,type) 
		VALUES (#{regist_id},#{approval_id},#{start_date},#{end_date},#{use_cnt},#{reason},#{type})	
	</insert>
	
	<select id="annualRegistrationGo" resultType="kr.co.cc.work.dto.WorkDTO">
		select id as member_id,name from member where admin_chk = 1
	</select>
	
	<select id="workHolidayList_Ad" resultType="kr.co.cc.work.dto.WorkDTO">
		SELECT l.regist_id , m.name, l.start_date ,l.end_date ,l.use_cnt ,l.approval 
		FROM leave_recode l inner join member m
		on l.regist_id = m.id
	</select>
	
	<select id="holidayListFind" resultType="kr.co.cc.work.dto.WorkDTO">		
		SELECT l.regist_id , m.name, l.start_date ,l.end_date ,l.use_cnt ,l.approval 
		FROM leave_recode l inner join member m
		on l.regist_id = m.id 
		WHERE l.start_date LIKE CONCAT(#{param1}, '%') or l.end_date LIKE CONCAT(#{param1}, '%')
		order by regist_date desc, regist_id
	</select>

	
	
</mapper>