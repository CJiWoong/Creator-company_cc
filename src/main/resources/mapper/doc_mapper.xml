<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC	"-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.cc.doc.dao.DocDAO">

	<select id="getApprovalList" resultType="kr.co.cc.doc.dto.ApprovalDTO">
		SELECT * FROM approval
	</select>

	<select id="getMemberList" resultType="hashmap">
		SELECT m.*, jl.name AS job_level_name, d.name AS dept_name FROM member m 
			LEFT JOIN job_level jl ON m.job_level_id = jl.id 
		LEFT JOIN dept d ON m.dept_id = d.id
	</select>

	<select id="getDocFormList" resultType="kr.co.cc.doc.dto.DocFormDTO">
		SELECT * FROM doc_form
	</select>
	
	<select id="getDeptMap" resultType="hashmap">
		SELECT * FROM dept WHERE id = #{deptId}
	</select>

	<select id="getMemberInfo" resultType="kr.co.cc.doc.dto.MemberDTO">
		SELECT * FROM member WHERE id = #{param1}
	</select>
	
	<select id="getJobLevelMap" resultType="hashmap">
		SELECT * FROM job_level WHERE id = #{job_level_id}
	</select>
	
	<select id="getMemberSignFilePath" resultType="string">
		SELECT id FROM attachment WHERE classification = '서명이미지' AND identify_value = #{param1}
	</select>
	
	<select id="getApprovalName" resultType="string">
		SELECT name FROM approval WHERE priority = #{param1}
	</select>
	
	<insert 
		id="docWrite"
		parameterType="kr.co.cc.doc.dto.DocDTO"
	>
		INSERT INTO doc(id, subject, content, status, member_id, doc_form_id, dept_id, job_level_name, public_range) 
			VALUES(#{id}
			, #{subject}
			, #{content}
			, #{status}
			, #{member_id}
			, #{doc_form_id}
			, #{dept_id}
			, #{job_level_name}
			, #{public_range})
	</insert>

	<insert id="attachmentSave" parameterType="string">
		INSERT INTO attachment(id, ori_file_name, classification, identify_value) 
			VALUES(#{attachmentId}, #{oriFileName}, #{classification}, #{identifyValue})
	</insert>
	
	<select id="getWritedDoc" resultType="kr.co.cc.doc.dto.DocDTO">
		SELECT * FROM doc WHERE id = #{param1}
	</select>
	
	<select id="getApprovalId" resultType="string">
		SELECT id FROM approval WHERE priority = #{param1}
	</select>
	
	<insert id="approvalWrite" parameterType="hashmap">
		INSERT INTO doc_status(doc_id, job_name, dept_name, approval_id, order_rank, member_id) 
			VALUES(#{doc_id}, #{job_name}, #{dept_name}, #{approval_id}, #{order_rank}, #{member_id})
	</insert>
	
	<insert id="docNotice" parameterType="string">
		INSERT INTO notice(send_id, receive_id, type, identify_value) 
			VALUES(#{sendId}, #{receiveId}, #{type}, #{identifyValue})
	</insert>

	<update id="docWriteETC" parameterType="string">
		UPDATE doc SET content = #{dateWritedContent} WHERE id = #{id}
	</update>

	<select id="getDocList" resultType="kr.co.cc.doc.dto.DocDTO">
		SELECT * FROM doc WHERE member_id = #{param1} AND status = #{param2} ORDER BY create_at DESC
	</select>

	<select id="getAttachmentList" resultType="kr.co.cc.doc.dto.AttachmentDTO">
		SELECT * FROM attachment WHERE classification = '전자문서첨부파일' AND identify_value = #{id}
	</select>
	
	<delete id="docDelete" parameterType="string">
		DELETE FROM doc WHERE id = #{docId}
	</delete>
	
	<select id="getDocForm">
		SELECT * FROM doc_form WHERE id = #{param1}
	</select>

	<delete id="attachmentDelete">
		DELETE FROM attachment WHERE id = #{attachmentId}
	</delete>

	<update id="docUpdate" parameterType="hashmap">
		UPDATE doc SET subject = #{subject}
			, content = #{afterContent}
			, status = #{status}
			, public_range = #{publicRange} 
			, create_date = #{docUpdateTime} 
		WHERE id = #{id}
	</update>
	
	<select id="getRequestDocList" parameterType="string" resultType="hashmap">
		SELECT d.id
			, d.subject
			, (SELECT dp.name FROM dept dp WHERE dp.id = d.dept_id) AS production_dept_name
			, d.public_range
			, (SELECT df.name FROM doc_form df WHERE df.id = d.doc_form_id) AS doc_form_name
			, DATE_FORMAT(d.create_at, '%Y-%m-%d %T') AS create_at
			, (SELECT a.name FROM approval a WHERE a.id = ds.approval_id) AS approval_kind_name
			, (SELECT m.name FROM member m WHERE m.id = ds.member_id) AS approval_member_name
			, ds.read_chk
			, ds.approval
			, MIN(ds.order_rank) AS order_rank
			FROM doc d 
			INNER JOIN doc_status ds ON d.id = ds.doc_id 
			WHERE d.member_id = #{loginId} AND d.status = 1 AND ds.approval = 0
			GROUP BY d.id
		ORDER BY d.create_at DESC
	</select>
	
	<select id="requestDocDetail" parameterType="string" resultType="hashmap">
		SELECT d.id
			, d.subject
			, d.content
			, d.public_range
			, (SELECT dp.name FROM dept dp WHERE dp.id = d.dept_id) AS production_dept_name
			, d.job_level_name
			, (SELECT m.name FROM member m WHERE m.id = d.member_id) AS create_member_name
			, (SELECT df.name FROM doc_form df WHERE df.id = d.doc_form_id) AS doc_form_name
			, DATE_FORMAT(d.create_at, '%Y-%m-%d %T') AS create_at
			, (SELECT a.name FROM approval a WHERE a.id = ds.approval_id) AS approval_kind_name
			, ds.job_name AS approval_member_job_name
			, (SELECT m.name FROM member m WHERE m.id = ds.member_id) AS approval_member_name
			, ds.read_chk 
			, ds.approval
			, MIN(ds.order_rank) AS order_rank
			FROM doc d 
			INNER JOIN doc_status ds ON d.id = ds.doc_id 
		WHERE d.id = #{docId} AND d.status = 1 AND ds.approval = 0
	</select>
	
	<select id="requestDocWaitList" parameterType="string" resultType="hashmap">
		SELECT d.id
			, d.subject
			, d.public_range
			, (SELECT m.name FROM member m WHERE m.id = d.member_id) AS create_member_name
			, (SELECT df.name FROM doc_form df WHERE df.id = d.doc_form_id) AS doc_form_name
			, (SELECT dp.name FROM dept dp WHERE dp.id = d.dept_id) AS production_dept_name
			, (SELECT a.name FROM approval a WHERE a.id = ds.approval_id) AS approval_kind_name
			, ds.read_chk 
			, DATE_FORMAT(d.create_at, '%Y-%m-%d %T') AS create_at
			, MIN(ds.order_rank) AS order_rank
			FROM doc d 
			INNER JOIN doc_status ds ON d.id = ds.doc_id 
			WHERE ds.member_id = #{loginId} AND d.status = 1 AND ds.approval = 0
			GROUP BY d.id
		ORDER BY d.create_at DESC
	</select>
	
	<update id="readCheckUpdate" parameterType="string">
		UPDATE doc_status ds SET ds.read_chk = TRUE
			WHERE doc_id = #{docId}
			AND member_id = #{loginId} 
		AND ds.order_rank = (SELECT MIN(ds2.order_rank) FROM doc_status ds2 WHERE doc_id = #{docId} AND member_id = #{loginId})
	</update>
	
	<update id="readTimeUpdate" parameterType="string">
		UPDATE doc_status ds SET ds.read_at = 
			CASE WHEN 
				(SELECT ds3.read_at FROM doc_status ds3 
					WHERE ds3.doc_id = #{docId} AND ds3.member_id = #{loginId} 
				AND ds3.order_rank = (SELECT MIN(ds4.order_rank) FROM doc_status ds4 WHERE ds4.doc_id = #{docId} AND ds4.member_id = #{loginId})) IS NULL 
			THEN #{currentTime} 
			ELSE 
				(SELECT ds5.read_at FROM doc_status ds5 
					WHERE ds5.doc_id = #{docId} AND ds5.member_id = #{loginId} 
				AND ds5.order_rank = (SELECT MIN(ds6.order_rank) FROM doc_status ds6 WHERE ds6.doc_id = #{docId} AND ds6.member_id = #{loginId}))
			END 
		WHERE ds.doc_id = #{docId}
			AND ds.member_id = #{loginId} 
		AND ds.order_rank = (SELECT MIN(ds2.order_rank) FROM doc_status ds2 WHERE ds2.doc_id = #{docId} AND ds2.member_id = #{loginId})
	</update>
	
</mapper>