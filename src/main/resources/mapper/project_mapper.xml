<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC	"-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="kr.co.cc.project.dao.ProjectDAO">

	<insert
	   useGeneratedKeys="false"
	    id="ProjectWrite" parameterType="kr.co.cc.project.dto.ProjectDTO">
	    <selectKey keyProperty="id" resultType="java.lang.String" order="BEFORE">
        SELECT UUID()
    </selectKey>
	    INSERT INTO project (name, member_id, public_range, start_at, end_at, step, status)
	    VALUES (#{name}, '7b4b4517-17dd-11ee-973f-0242ac110002', #{public_range}, #{start_at}, #{end_at}, '기획', '준비중')
	</insert>

    
    <insert id="addContributor" parameterType="java.util.Map">
	    INSERT INTO contributor (member_id, project_id)
	    VALUES (
	        (SELECT id FROM member WHERE user_id = #{param1}),
	        #{param2}
	    )
	</insert>


	<select id="getUserIdsByProjectId" resultType="java.lang.String">
	        SELECT member.user_id
	        FROM project
	        INNER JOIN contributor ON project.id = contributor.project_id
	        INNER JOIN member ON contributor.member_id = member.id
	        WHERE project.id = #{id}
    </select>


	
		<select id="ProjectList" resultType="kr.co.cc.project.dto.ProjectDTO">
		    SELECT p.id, p.name, m.user_id AS member_id, p.create_at, p.step, GROUP_CONCAT(c.member_id SEPARATOR ',') AS contributors
		    FROM project p
		    LEFT JOIN contributor c ON p.id = c.project_id
		    LEFT JOIN member m ON c.member_id = m.id
		    GROUP BY p.id, p.name, p.create_at, p.step
		</select>



	
		<select id="ProjectDetail" parameterType="int" resultType="kr.co.cc.project.dto.ProjectDTO">
		    SELECT c.id, c.project_id, c.member_id, c.content, c.comment_status, c.create_at, c.step, c.status, a.id
			FROM comment c
			JOIN attachment a ON c.project_id = a.identify_value
			WHERE project_id = #{id} AND a.classification = '프로젝트첨부파일';
		</select>
		
		
		
		
		<insert id="commentWrite" parameterType="kr.co.cc.project.dto.ProjectDTO">
		INSERT INTO
		comment(content,member_id,project_id,step,status)
		VALUES(#{content},#{member_id},#{project_id},#{step},#{status})
	</insert>
		
		<insert
		useGeneratedKeys="true"
		keyColumn="id"
		keyProperty="id" 
		id="ProjectFileWrite" parameterType="kr.co.cc.project.dto.ProjectDTO">
		INSERT INTO attachment(identify_value, ori_file_name, new_file_name,classification)
		VALUES(#{idx},#{ori_file_name},#{new_file_name},'프로젝트첨부파일')
	</insert>
	
	<update id="stateChange" parameterType="kr.co.cc.project.dto.ProjectDTO">
		UPDATE  project SET  step=#{step} where project_id=#{project_id}
	</update>

	<insert 
		useGeneratedKeys="true" 
		keyColumn="id" 
		keyProperty="id" 
		id="AttachmentSave" parameterType="kr.co.cc.project.dto.AttachmentDTO">
	INSERT INTO attachment(identify_value, ori_file_name, new_file_name,classification)
	VALUES(#{identify_value},#{ori_file_name},#{new_file_name},'프로젝트첨부파일')
	</insert>
	
	<select id="projectDetailUp" resultType="kr.co.cc.project.dto.ProjectDTO">
    SELECT p.project_id, p.name, p.member_id, p.public_range, p.priod, p.deadlinepriod, p.step, p.status, GROUP_CONCAT(c.member_id SEPARATOR ',') AS contributors
    FROM project p
    INNER JOIN contributor c ON p.project_id = c.project_id
    WHERE p.project_id = #{param1}
</select>

	<update id="projectUpdate" parameterType="hashmap">
	  UPDATE project
	  SET name = #{name},
	      public_range = #{public_range},
	      priod = #{priod},
	      deadlinepriod = #{deadlinepriod}
	  WHERE project_id = #{project_id}
	</update>
	
	<delete id="clearContributors" parameterType="java.util.Map">
	  DELETE FROM contributor
	  WHERE project_id = #{projectId}
	    AND member_id = #{contributorId}
	</delete>
	
	
	
	


																							
</mapper>


